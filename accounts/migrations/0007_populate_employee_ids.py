# Generated by Django 5.2.7 on 2025-10-15 11:12

from django.db import migrations
import re


def populate_employee_ids(apps, schema_editor):
    User = apps.get_model('accounts', 'User')
    
    # Get all users without employee_id
    users_without_employee_id = User.objects.filter(employee_id__isnull=True).order_by('id')
    
    if not users_without_employee_id.exists():
        return  # No users to update
    
    # Find the highest existing employee_id number to continue from
    existing_employee_ids = User.objects.filter(
        employee_id__regex=r'^DW\d{4}$'
    ).values_list('employee_id', flat=True)
    
    max_number = 0
    for emp_id in existing_employee_ids:
        if emp_id and emp_id.startswith('DW'):
            try:
                number = int(emp_id[2:])
                max_number = max(max_number, number)
            except ValueError:
                continue
    
    # Start counter from next available number
    counter = max_number + 1
    
    for user in users_without_employee_id:
        # Generate employee_id
        employee_id = f"DW{counter:04d}"
        
        # Generate username if needed (for existing users without proper username)
        if not user.username or user.username == user.email:
            if user.first_name:
                # Clean first name (remove special chars, make lowercase)
                base_username = re.sub(r'[^a-zA-Z]', '', user.first_name.lower())
                if base_username:
                    # Check for existing usernames with this pattern
                    username_prefix = f"DW_{base_username}"
                    existing_count = User.objects.filter(
                        username__startswith=username_prefix
                    ).count()
                    
                    if existing_count == 0:
                        # Try without suffix first
                        if not User.objects.filter(username=username_prefix).exists():
                            user.username = username_prefix
                        else:
                            user.username = f"{username_prefix}01"
                    else:
                        # Generate with suffix
                        suffix_counter = existing_count + 1
                        while suffix_counter < 1000:
                            if suffix_counter < 100:
                                suffix = f"{suffix_counter:02d}"
                            else:
                                suffix = f"{suffix_counter:03d}"
                            
                            new_username = f"{username_prefix}{suffix}"
                            if not User.objects.filter(username=new_username).exists():
                                user.username = new_username
                                break
                            suffix_counter += 1
                        else:
                            # Fallback
                            user.username = f"{username_prefix}{counter}"
                else:
                    # Fallback if no valid first name
                    user.username = f"DW_user{counter}"
            else:
                # Fallback if no first name
                user.username = f"DW_user{counter}"
        
        user.employee_id = employee_id
        user.save(update_fields=['employee_id', 'username'])
        counter += 1


def reverse_populate_employee_ids(apps, schema_editor):
    # Reverse operation - set employee_id to null for all users
    User = apps.get_model('accounts', 'User')
    User.objects.all().update(employee_id=None)


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0006_add_employee_id_and_remove_descriptions'),
    ]

    operations = [
        migrations.RunPython(
            populate_employee_ids,
            reverse_populate_employee_ids
        ),
    ]
